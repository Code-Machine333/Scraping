from __future__ import annotations

from typing import Dict, List

from sqlalchemy.engine import Engine


def _values_clause(cols: List[str]) -> str:
    return ",".join([f"%s" for _ in cols])


def _insert_on_dup(table: str, cols: List[str], update_cols: List[str]) -> str:
    cols_sql = ",".join(cols)
    vals_sql = ",".join(["%s" for _ in cols])
    updates = ",".join([f"{c}=VALUES({c})" for c in update_cols])
    return f"INSERT INTO {table}({cols_sql}) VALUES({vals_sql}) ON DUPLICATE KEY UPDATE {updates}"


def load_rows(engine: Engine, rows: Dict[str, List[dict]]) -> None:
    """Bulk upsert rows in correct order using SQLAlchemy Core connections.

    Expects rows generated by transform.to_rows().
    """
    with engine.begin() as conn:
        # Countries (by name)
        for r in rows.get("countries", []):
            conn.exec_driver_sql(
                _insert_on_dup("countries", ["name"], ["name"]), (r["name"],)
            )

        # Seasons
        for r in rows.get("seasons", []):
            conn.exec_driver_sql(
                _insert_on_dup("seasons", ["name", "start_date", "end_date"], ["start_date", "end_date"]),
                (r["name"], r.get("start_date"), r.get("end_date")),
            )

        # Series (requires season_id lookup)
        for r in rows.get("series", []):
            season_id = None
            if r.get("season_name"):
                row = conn.exec_driver_sql("SELECT id FROM seasons WHERE name=%s", (r["season_name"],)).fetchone()
                if row:
                    season_id = int(row[0])
            conn.exec_driver_sql(
                _insert_on_dup("series", ["name", "season_id"], ["season_id"]),
                (r["name"], season_id),
            )

        # Venues (with optional country_name -> country_id)
        for r in rows.get("venues", []):
            country_id = None
            if r.get("country_name"):
                crow = conn.exec_driver_sql("SELECT id FROM countries WHERE name=%s", (r["country_name"],)).fetchone()
                if crow:
                    country_id = int(crow[0])
                else:
                    res = conn.exec_driver_sql("INSERT INTO countries(name) VALUES(%s)", (r["country_name"],))
                    country_id = int(res.lastrowid)
            conn.exec_driver_sql(
                _insert_on_dup("venues", ["name", "city", "country_id"], ["city", "country_id"]),
                (r["name"], r.get("city"), country_id),
            )

        # Teams
        for r in rows.get("teams", []):
            country_id = None
            if r.get("country_name"):
                crow = conn.exec_driver_sql("SELECT id FROM countries WHERE name=%s", (r["country_name"],)).fetchone()
                if crow:
                    country_id = int(crow[0])
            conn.exec_driver_sql(
                _insert_on_dup("teams", ["name", "country_id"], ["country_id"]),
                (r["name"], country_id),
            )

        # Players
        for r in rows.get("players", []):
            country_id = None
            if r.get("country_name"):
                crow = conn.exec_driver_sql("SELECT id FROM countries WHERE name=%s", (r["country_name"],)).fetchone()
                if crow:
                    country_id = int(crow[0])
            conn.exec_driver_sql(
                _insert_on_dup("players", ["full_name", "country_id"], ["country_id"]),
                (r["full_name"], country_id),
            )

        # Alias tables: resolve canonical ids and insert
        for r in rows.get("team_alias", []):
            row = conn.exec_driver_sql("SELECT id FROM teams WHERE name=%s", (r["alias"],)).fetchone()
            if row:
                conn.exec_driver_sql(
                    "INSERT IGNORE INTO team_alias(team_id, alias, source_id) VALUES(%s,%s,%s)",
                    (int(row[0]), r["alias"], r["source_id"]),
                )
        for r in rows.get("player_alias", []):
            row = conn.exec_driver_sql("SELECT id FROM players WHERE full_name=%s", (r["alias"],)).fetchone()
            if row:
                conn.exec_driver_sql(
                    "INSERT IGNORE INTO player_alias(player_id, alias, source_id) VALUES(%s,%s,%s)",
                    (int(row[0]), r["alias"], r["source_id"]),
                )

        # Matches (resolve venue_id, series_id, winner, toss winners)
        for r in rows.get("matches", []):
            venue_id = None
            if r.get("venue_name"):
                vrow = conn.exec_driver_sql("SELECT id FROM venues WHERE name=%s", (r["venue_name"],)).fetchone()
                if vrow:
                    venue_id = int(vrow[0])
            series_id = None
            if r.get("series_name"):
                srow = conn.exec_driver_sql("SELECT id FROM series WHERE name=%s", (r["series_name"],)).fetchone()
                if srow:
                    series_id = int(srow[0])
            winner_id = None
            if r.get("winner_team_name"):
                wrow = conn.exec_driver_sql("SELECT id FROM teams WHERE name=%s", (r["winner_team_name"],)).fetchone()
                if wrow:
                    winner_id = int(wrow[0])
            toss_winner_id = None
            if r.get("toss_winner_team_name"):
                trow = conn.exec_driver_sql("SELECT id FROM teams WHERE name=%s", (r["toss_winner_team_name"],)).fetchone()
                if trow:
                    toss_winner_id = int(trow[0])
            conn.exec_driver_sql(
                _insert_on_dup(
                    "matches",
                    [
                        "format", "start_date", "end_date", "venue_id", "series_id",
                        "result_type", "winner_team_id", "toss_winner_team_id", "toss_decision",
                        "day_night", "follow_on", "dl_method", "source_match_key",
                    ],
                    [
                        "format", "start_date", "end_date", "venue_id", "series_id",
                        "result_type", "winner_team_id", "toss_winner_team_id", "toss_decision",
                        "day_night", "follow_on", "dl_method",
                    ],
                ),
                (
                    r["format"], r.get("start_date"), r.get("end_date"), venue_id, series_id,
                    r.get("result_type"), winner_id, toss_winner_id, r.get("toss_decision"),
                    int(bool(r.get("day_night"))), int(bool(r.get("follow_on"))), int(bool(r.get("dl_method"))), r.get("source_match_key"),
                ),
            )

        # Match teams (link by match_key + team_name)
        for r in rows.get("match_teams", []):
            mrow = conn.exec_driver_sql("SELECT id FROM matches WHERE source_match_key=%s", (rows["matches"][0]["source_match_key"],)).fetchone()
            if not mrow:
                continue
            match_id = int(mrow[0])
            trow = conn.exec_driver_sql("SELECT id FROM teams WHERE name=%s", (r["team_name"],)).fetchone()
            if not trow:
                continue
            team_id = int(trow[0])
            conn.exec_driver_sql(
                "INSERT IGNORE INTO match_teams(match_id, team_id, is_home) VALUES(%s,%s,%s)",
                (match_id, team_id, r.get("is_home", 0)),
            )

        # Innings (link by match and teams)
        mrow = conn.exec_driver_sql("SELECT id FROM matches WHERE source_match_key=%s", (rows["matches"][0]["source_match_key"],)).fetchone()
        match_id = int(mrow[0]) if mrow else None
        inning_ids = []
        for r in rows.get("innings", []):
            bt = conn.exec_driver_sql("SELECT id FROM teams WHERE name=%s", (r["batting_team_name"],)).fetchone()
            bw = conn.exec_driver_sql("SELECT id FROM teams WHERE name=%s", (r["bowling_team_name"],)).fetchone()
            bt_id = int(bt[0]) if bt else None
            bw_id = int(bw[0]) if bw else None
            conn.exec_driver_sql(
                _insert_on_dup(
                    "innings",
                    ["match_id", "innings_no", "batting_team_id", "bowling_team_id", "runs", "wickets", "overs", "declared", "follow_on_enforced"],
                    ["batting_team_id", "bowling_team_id", "runs", "wickets", "overs", "declared", "follow_on_enforced"],
                ),
                (match_id, r["innings_no"], bt_id, bw_id, r.get("runs"), r.get("wickets"), r.get("overs"), r.get("declared"), r.get("follow_on_enforced")),
            )
            row = conn.exec_driver_sql("SELECT id FROM innings WHERE match_id=%s AND innings_no=%s", (match_id, r["innings_no"])).fetchone()
            inning_ids.append(int(row[0]))

        # Batting innings
        for idx, r in enumerate(rows.get("batting_innings", []), start=1):
            pid = conn.exec_driver_sql("SELECT id FROM players WHERE full_name=%s", (r["player_full_name"],)).fetchone()
            bow_id = conn.exec_driver_sql("SELECT id FROM players WHERE full_name=%s", (r["bowler_full_name"],)).fetchone() if r.get("bowler_full_name") else None
            fld_id = conn.exec_driver_sql("SELECT id FROM players WHERE full_name=%s", (r["fielder_full_name"],)).fetchone() if r.get("fielder_full_name") else None
            conn.exec_driver_sql(
                _insert_on_dup(
                    "batting_innings",
                    ["innings_id", "player_id", "position", "runs", "balls", "minutes", "fours", "sixes", "how_out", "bowler_id", "fielder_id"],
                    ["position", "runs", "balls", "minutes", "fours", "sixes", "how_out", "bowler_id", "fielder_id"],
                ),
                (
                    inning_ids[0], int(pid[0]) if pid else None, r.get("position"), r.get("runs"), r.get("balls"), r.get("minutes"), r.get("fours"), r.get("sixes"), r.get("how_out"),
                    int(bow_id[0]) if bow_id else None, int(fld_id[0]) if fld_id else None,
                ),
            )

        # Bowling innings
        for r in rows.get("bowling_innings", []):
            pid = conn.exec_driver_sql("SELECT id FROM players WHERE full_name=%s", (r["player_full_name"],)).fetchone()
            conn.exec_driver_sql(
                _insert_on_dup(
                    "bowling_innings",
                    ["innings_id", "player_id", "overs", "maidens", "runs", "wickets", "wides", "no_balls", "econ"],
                    ["overs", "maidens", "runs", "wickets", "wides", "no_balls", "econ"],
                ),
                (
                    inning_ids[0], int(pid[0]) if pid else None, r.get("overs"), r.get("maidens"), r.get("runs"), r.get("wickets"), r.get("wides"), r.get("no_balls"), r.get("econ"),
                ),
            )

        # Deliveries
        for r in rows.get("deliveries", []):
            sid = conn.exec_driver_sql("SELECT id FROM players WHERE full_name=%s", (r["striker_full_name"],)).fetchone()
            nsid = conn.exec_driver_sql("SELECT id FROM players WHERE full_name=%s", (r["non_striker_full_name"],)).fetchone()
            bid = conn.exec_driver_sql("SELECT id FROM players WHERE full_name=%s", (r["bowler_full_name"],)).fetchone()
            did = conn.exec_driver_sql("SELECT id FROM players WHERE full_name=%s", (r["dismissal_full_name"],)).fetchone() if r.get("dismissal_full_name") else None
            conn.exec_driver_sql(
                _insert_on_dup(
                    "deliveries",
                    [
                        "match_id", "innings_id", "over_no", "ball_no", "striker_id", "non_striker_id", "bowler_id",
                        "runs_off_bat", "extras_bye", "extras_legbye", "extras_wide", "extras_noball", "extras_penalty",
                        "wicket_type", "dismissal_player_id"
                    ],
                    [
                        "striker_id", "non_striker_id", "bowler_id",
                        "runs_off_bat", "extras_bye", "extras_legbye", "extras_wide", "extras_noball", "extras_penalty",
                        "wicket_type", "dismissal_player_id"
                    ],
                ),
                (
                    match_id, inning_ids[0], r["over_no"], r["ball_no"], int(sid[0]) if sid else None, int(nsid[0]) if nsid else None, int(bid[0]) if bid else None,
                    r.get("runs_off_bat", 0), r.get("extras_bye", 0), r.get("extras_legbye", 0), r.get("extras_wide", 0), r.get("extras_noball", 0), r.get("extras_penalty", 0),
                    r.get("wicket_type"), int(did[0]) if did else None,
                ),
            )


